%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2421 2139
%%HiResBoundingBox: 0 0 2421 2139
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2421 2139 re
W
q
[1 0 0 -1 0 2139] cm
q
0 0 2421 2139 re
W*
q
[0.75 0 0 0.75 0 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3228 2852 re
f
Q
Q
q
0 0 2421 2139 re
W*
q
[0.749971 0 0 0.750078 0 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3228.137 2851.7109 re
f
Q
q
[45.227333 0 0 45.233799 48.913898 783.71521] cm
4.56 18.6 m
6.5 18.860001 8.28 19.040001 8.28 21.24 c
8.28 23.32 6.639999 24.1 4.92 24.1 c
4.079999 24.1 l
2.32 24.1 1.139999 23.200001 0.819999 21.639999 c
0.779999 21.459999 0.859999 21.34 1.059999 21.34 c
1.339999 21.34 l
1.459999 21.34 1.559999 21.460001 1.579999 21.66 c
1.839999 22.879999 2.659999 23.4 4.099999 23.4 c
4.879999 23.4 l
6.379999 23.4 7.599999 22.940001 7.599999 21.24 c
7.599999 19.6 6.04 19.440001 4.56 19.26 c
2.56 19.02 1 18.76 1 16.56 c
1 14.679999 2.28 13.94 4.219999 13.94 c
4.779999 13.94 l
6.599999 13.94 7.819999 14.74 7.919999 16.539999 c
7.919999 16.74 7.859999 16.859999 7.639999 16.859999 c
7.459999 16.859999 l
7.259999 16.859999 7.179999 16.759998 7.199999 16.56 c
7.119999 15.179999 6.259999 14.599999 4.739999 14.599999 c
4.279999 14.599999 l
2.679999 14.599999 1.679999 15.02 1.679999 16.56 c
1.679999 18.219999 2.939999 18.42 4.559999 18.599998 c
4.56 18.6 l
h
14.636937 13.92 m
16.696938 13.92 18.196938 15.14 18.196938 17.559999 c
18.196938 20.4 l
18.196938 22.779999 16.696938 24.1 14.636938 24.1 c
13.876938 24.1 l
12.296938 24.1 11.396938 23.48 10.976938 22.34 c
10.976938 27.700001 l
10.976938 27.900002 10.896938 28 10.676938 28 c
10.596938 28 l
10.396938 28 10.296938 27.9 10.296938 27.700001 c
10.296938 14.300001 l
10.296938 14.100001 10.396938 14.000001 10.596938 14.000001 c
10.676938 14.000001 l
10.896938 14.000001 10.976938 14.100001 10.976938 14.300001 c
10.976938 15.560001 l
11.396938 14.420001 12.296938 13.920001 13.876938 13.920001 c
14.636938 13.920001 l
14.636937 13.92 l
h
17.496937 20.440001 m
17.496937 17.700001 l
17.496937 15.640001 16.496937 14.620001 14.616937 14.620001 c
13.876937 14.620001 l
11.996937 14.620001 10.976936 15.640001 10.976936 17.700001 c
10.976936 20.440001 l
10.976936 22.34 11.996937 23.400002 13.876936 23.400002 c
14.616936 23.400002 l
16.496935 23.400002 17.496937 22.340002 17.496937 20.440002 c
17.496937 20.440001 l
h
25.773874 14.64 m
25.693874 14.8 25.573874 14.84 25.413874 14.780001 c
25.133873 14.68 24.833874 14.620001 24.393873 14.620001 c
24.173874 14.620001 l
22.353874 14.620001 21.333874 15.780001 20.993874 16.360001 c
20.993874 23.700001 l
20.993874 23.900002 20.893873 24 20.693874 24 c
20.613874 24 l
20.413874 24 20.313875 23.9 20.313875 23.700001 c
20.313875 14.300001 l
20.313875 14.100001 20.413876 14.000001 20.613874 14.000001 c
20.693874 14.000001 l
20.893875 14.000001 20.993874 14.100001 20.993874 14.300001 c
20.993874 15.640001 l
21.813873 14.440002 22.993874 13.920001 24.373875 13.920001 c
24.773874 13.920001 25.233875 13.960001 25.633875 14.060001 c
25.813875 14.120002 25.873875 14.240002 25.813875 14.400002 c
25.773874 14.64 l
h
31.550812 13.92 m
33.630814 13.92 35.130814 15.14 35.130814 17.559999 c
35.130814 20.4 l
35.130814 22.779999 33.630814 24.1 31.550814 24.1 c
30.730814 24.1 l
28.650814 24.1 27.150814 22.780001 27.150814 20.4 c
27.150814 17.559999 l
27.150814 15.139999 28.650814 13.919999 30.730814 13.919999 c
31.550814 13.919999 l
31.550812 13.92 l
h
34.430813 20.440001 m
34.430813 17.700001 l
34.430813 15.640001 33.430813 14.620001 31.550812 14.620001 c
30.730812 14.620001 l
28.850813 14.620001 27.830812 15.640001 27.830812 17.700001 c
27.830812 20.440001 l
27.830812 22.34 28.850813 23.400002 30.730812 23.400002 c
31.550812 23.400002 l
33.430813 23.400002 34.430813 22.340002 34.430813 20.440002 c
34.430813 20.440001 l
h
40.467751 24.08 m
38.067749 24.08 37.247749 22.92 37.247749 20.540001 c
37.247749 14.300001 l
37.247749 14.100001 37.347748 14.000001 37.547749 14.000001 c
37.647747 14.000001 l
37.847748 14.000001 37.947746 14.100001 37.947746 14.300001 c
37.947746 20.400002 l
37.947746 22.340002 38.307747 23.380001 40.327747 23.380001 c
40.667747 23.380001 l
42.487747 23.380001 43.507748 22.220001 43.847748 21.640001 c
43.847748 14.300001 l
43.847748 14.100001 43.947746 14.000001 44.147747 14.000001 c
44.227749 14.000001 l
44.42775 14.000001 44.527748 14.100001 44.527748 14.300001 c
44.527748 23.700001 l
44.527748 23.900002 44.42775 24 44.227749 24 c
44.147747 24 l
43.947746 24 43.847748 23.9 43.847748 23.700001 c
43.847748 22.360001 l
42.987747 23.620001 41.787746 24.08 40.627747 24.08 c
40.467747 24.08 l
40.467751 24.08 l
h
50.284687 14.7 m
48.524689 14.7 l
48.524689 20.84 l
48.524689 22.6 48.92469 23.32 50.344688 23.360001 c
50.504688 23.360001 50.56469 23.5 50.58469 23.640001 c
50.56469 23.780001 l
50.58469 23.92 50.484688 24.040001 50.324688 24.040001 c
48.544689 23.980001 47.844688 22.960001 47.844688 20.880001 c
47.844688 14.700001 l
46.74469 14.700001 l
46.544689 14.700001 46.444691 14.6 46.444691 14.400001 c
46.444691 14.320001 l
46.444691 14.1 46.544689 14.000001 46.74469 14.000001 c
47.844688 14.000001 l
47.844688 12.860001 l
47.844688 12.660001 47.944687 12.56 48.144688 12.56 c
48.224689 12.56 l
48.42469 12.56 48.524689 12.660001 48.524689 12.860001 c
48.524689 14.000001 l
50.26469 14.000001 l
50.484692 14.000001 50.58469 14.100001 50.58469 14.300001 c
50.58469 14.400002 l
50.58469 14.600001 50.504688 14.700002 50.284691 14.700002 c
50.284687 14.7 l
h
f
Q
q
[11.922125 0 0 11.923828 591.18677 35.339825] cm
/DeviceRGB {} CS
[0.271 0.725 0.741] SC
/DeviceRGB {} cs
[0.271 0.725 0.741] sc
71.410004 57.470001 m
66.660004 57.470001 62.140003 54.400002 59.640003 52.34 c
59.269264 52.076187 59.017841 51.726574 58.885727 51.291153 c
58.753613 50.855732 58.768372 50.425346 58.930004 50 c
60.619999 45 63.060001 41.470001 66.599998 39 c
72.290001 35 84.080002 36.5 90.080002 41.860001 c
90.408516 42.12286 90.631851 42.456196 90.75 42.860001 c
90.886841 43.291607 90.87812 43.720253 90.723831 44.145935 c
90.569542 44.571613 90.301598 44.9063 89.919998 45.150002 c
89.713188 45.281006 89.489861 45.371006 89.25 45.420002 c
85.400002 46.560001 83.510002 48.910004 81.510002 51.420002 c
79.510002 53.93 77.32 56.620003 73.230003 57.360001 c
72.626572 57.450157 72.019905 57.486824 71.410004 57.470005 c
71.410004 57.470001 l
h
63.169998 50 m
65.379997 51.650002 69.169998 54 72.540001 53.349998 c
75.160004 52.879997 76.599998 51.099998 78.410004 48.839996 c
80.122887 46.471458 82.226219 44.524792 84.720001 42.999996 c
79.510002 40.27 72.080002 40.060001 68.889999 42.279999 c
66.169945 44.250668 64.263283 46.823997 63.169998 49.999996 c
63.169998 50 l
h
f
47.509998 53.84 m
47.189999 53.84 l
41.899998 53.84 32.669998 52.920002 27.659998 47.060001 c
23.869999 42.620003 23.909998 37.75 23.949997 33.060001 c
23.989996 28.370003 24.029997 23.52 20.499996 18.310001 c
20.09012 17.860794 19.920418 17.33419 19.990885 16.730188 c
20.061352 16.126186 20.347723 15.652791 20.849997 15.310001 c
21.205759 15.104384 21.589094 15.00105 22 14.999999 c
33.419998 14.43 48.23 23.75 50.91 33.169998 c
51.674553 35.823559 52.007889 38.530228 51.910004 41.289997 c
51.888348 41.842484 51.674377 42.30624 51.268097 42.681267 c
50.861816 43.056293 50.38245 43.23254 49.830002 43.209999 c
49.565617 43.199585 49.313232 43.139088 49.072849 43.028503 c
48.83247 42.917919 48.622311 42.765633 48.442375 42.571636 c
48.26244 42.37764 48.126362 42.156643 48.034142 41.908642 c
47.941921 41.660637 47.900539 41.404423 47.910004 41.139999 c
48.00629 38.805882 47.73296 36.515884 47.090004 34.27 c
45.170006 27.51 34.590004 20.389999 25.600004 19.16 c
28 24.17 28 28.85 28 33.07 c
28 37.59 27.93 41.169998 30.75 44.470001 c
34.970001 49.41 43.869999 49.889999 47.549999 49.850002 c
47.992153 49.845802 48.39175 49.974125 48.748795 50.23497 c
49.105839 50.495815 49.349575 50.837494 49.48 51.260002 c
49.679157 51.905052 49.577717 52.498741 49.175682 53.041069 c
48.773647 53.583401 48.235085 53.853043 47.559998 53.850002 c
47.509998 53.84 l
h
f
48.330002 82.360001 m
47.650509 82.359505 47.111305 82.084221 46.712395 81.534142 c
46.313484 80.98407 46.219353 80.386017 46.43 79.739998 c
48.689999 72.799995 48.779999 64.419998 46.66 56.159996 c
45.055641 49.596851 42.118977 43.696854 37.850002 38.459995 c
37.693291 38.255634 37.580269 38.029442 37.510937 37.781418 c
37.441601 37.53339 37.42094 37.281376 37.448959 37.025375 c
37.476978 36.769371 37.551662 36.52779 37.673004 36.300632 c
37.794346 36.073479 37.953617 35.877087 38.150822 35.711456 c
38.34803 35.54583 38.568981 35.422882 38.813683 35.342609 c
39.058388 35.262337 39.309238 35.230515 39.566231 35.247143 c
39.823231 35.263771 40.067886 35.327656 40.300201 35.438797 c
40.53252 35.549934 40.735786 35.700333 40.91 35.889996 c
45.568535 41.592236 48.775204 48.018902 50.530003 55.169998 c
52.829998 64.169998 52.719997 73.330002 50.219997 80.989998 c
50.084743 81.397545 49.843281 81.727325 49.495609 81.979347 c
49.147938 82.231361 48.759403 82.358246 48.330002 82.360008 c
48.330002 82.360001 l
h
f
79.940002 92.690002 m
79.545074 92.690948 79.18174 92.584282 78.850006 92.369995 c
78.770004 92.370003 78.060005 91.920006 73.590004 89.620003 c
71.714127 88.62915 69.774132 87.78582 67.770004 87.090004 c
61.455769 84.995667 54.972435 83.932327 48.320004 83.899994 c
47.599998 83.900002 l
35.919998 83.900002 24.959999 86.900002 16.659998 92.349998 c
16.437878 92.495575 16.196363 92.59314 15.935453 92.642693 c
15.674542 92.692253 15.414073 92.690033 15.154046 92.636024 c
14.89402 92.582016 14.654206 92.480339 14.434606 92.330994 c
14.215004 92.181648 14.032312 91.995979 13.88653 91.773994 c
13.740748 91.552002 13.642961 91.310577 13.593166 91.049713 c
13.543372 90.788857 13.545359 90.528381 13.599124 90.268303 c
13.652889 90.008232 13.754348 89.768326 13.903498 89.548584 c
14.052648 89.32885 14.23815 89.145988 14.460003 89 c
23.58 83 35.599998 79.729996 48.349998 79.900002 c
55.412601 79.938019 62.295933 81.068024 69 83.290009 c
71.196503 84.048576 73.323166 84.968575 75.379997 86.050003 c
80.539993 88.720001 80.829994 88.900002 80.989998 89.050003 c
81.362793 89.290802 81.626244 89.619286 81.780357 90.035454 c
81.934479 90.45163 81.948517 90.872475 81.822479 91.298004 c
81.696442 91.723518 81.455467 92.068832 81.099556 92.333946 c
80.743645 92.599045 80.343796 92.731064 79.900002 92.729996 c
79.940002 92.690002 l
h
f
54.950001 58.09 m
54.555267 58.089069 54.192593 57.98077 53.861984 57.765099 c
53.531376 57.549427 53.28611 57.261147 53.12619 56.900249 c
52.966274 56.539356 52.917477 56.164017 52.979801 55.774231 c
53.042126 55.384445 53.205524 55.043034 53.469997 54.749996 c
55.348053 52.685265 57.441391 50.868595 59.750004 49.299992 c
64.231796 46.1539 69.191788 44.260571 74.62999 43.620003 c
74.895203 43.593479 75.155396 43.61871 75.410576 43.695698 c
75.665749 43.77269 75.896484 43.895576 76.102776 44.064362 c
76.309067 44.233143 76.475204 44.434971 76.601204 44.669849 c
76.727203 44.904728 76.803467 45.154778 76.829994 45.419994 c
76.856506 45.685207 76.831268 45.9454 76.75428 46.200577 c
76.677292 46.455757 76.554405 46.686493 76.385628 46.892784 c
76.216843 47.099072 76.015015 47.265213 75.780136 47.391209 c
75.545258 47.517212 75.295212 47.593475 75.029999 47.619999 c
70.28315 48.211525 65.949821 49.878193 62.029999 52.620007 c
59.9827 54.010166 58.126034 55.620163 56.459999 57.450001 c
56.052567 57.889595 55.549232 58.102928 54.950001 58.09 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
